// <auto-generated />
using AuthService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthService.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20241021041930_PostRegisterFixedv2")]
    partial class PostRegisterFixedv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Core.Entidades.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Permiso para crear nuevos usuarios",
                            PermissionName = "CanCreateUsers"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Permiso para editar información de usuarios",
                            PermissionName = "CanEditUsers"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Permiso para eliminar cuentas de usuarios",
                            PermissionName = "CanDeleteUsers"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Permiso para crear nóminas",
                            PermissionName = "CanCreatePayroll"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Permiso para editar nóminas",
                            PermissionName = "CanEditPayroll"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Permiso para ver reportes",
                            PermissionName = "CanViewReports"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Permiso para crear reportes",
                            PermissionName = "CanCreateReports"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Permiso para crear nuevas solicitudes",
                            PermissionName = "CanCreateRequests"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Permiso para aprobar solicitudes",
                            PermissionName = "CanApproveRequests"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Permiso para desaprobar solicitudes",
                            PermissionName = "CanRejectRequests"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Permiso para ver sus propias solicitudes",
                            PermissionName = "CanViewOwnRequests"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Permiso para editar sus propias solicitudes antes de aprobación",
                            PermissionName = "CanEditOwnRequests"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Permiso para crear, editar y eliminar roles",
                            PermissionName = "CanManageRoles"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Permiso para asignar roles a usuarios",
                            PermissionName = "CanAssignRoles"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Permiso para gestionar configuraciones del sistema",
                            PermissionName = "CanManageSystemSettings"
                        });
                });

            modelBuilder.Entity("AuthService.Core.Entidades.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "RRHH"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Jefatura"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "Usuario"
                        });
                });

            modelBuilder.Entity("AuthService.Core.Entidades.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 12
                        });
                });

            modelBuilder.Entity("AuthService.Core.Entidades.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AuthService.Core.Entidades.RolePermission", b =>
                {
                    b.HasOne("AuthService.Core.Entidades.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Core.Entidades.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AuthService.Core.Entidades.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Core.Entidades.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthService.Core.Entidades.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AuthService.Core.Entidades.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
